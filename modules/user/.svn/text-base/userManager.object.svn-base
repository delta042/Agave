<?php
//TODO: properly process $prefs and $mappings
final class userManager {
	public function __construct() {
		global $agave;
		$this->agave = $agave;
	}
	public function __destruct() {}
	
	public function returnUsers($mappings=NULL, $sort=NULL, $sortType=NULL, $basic=NULL) {
		//assemble joins
		$join = array();
		if(isset($mappings)) $join[] = "INNER JOIN  `users_map` um ON u.`userKey` = um.`userKey`";
		$join = implode(" ", $join);

		//assemble where clauses for mappings
		$where = array();
		if(isset($mappings)) {
			$mappingsWhere = array();
			foreach($mappings as $mapping=>$value) {
				$value = (is_array($value)) ? implode("','", $value) : $value;
				$mappingsWhere[] = "WHERE um.`$mapping` IN('".$value."')";
			}
			$where[] = implode(" AND ", $mappingsWhere);
		}		
		
		//compress where clauses
		$where = implode(" AND ", $where);
		
		//assemble sort clause: TODO allow for multiple parameters
		$sort = ($sort) ? "ORDER BY $sort $sortType": NULL;
		
		$query = "SELECT u.*, um.* FROM `users` u $join $where $sort ";
		$results = $this->agave->doSQLQuery($query, 3);
		
		//build user objects on results - TODO: Should we build the objects here?
		$keys = array();
		for($i=0; $i<count($results); $i++) $keys[$i] = $results[$i]['userKey'];
		$keys = array_unique($keys);
		
		$users = array();
		for($i=0; $i<count($keys); $i++) {
			$users[$i] = $this->agave->load('user', TRUE);
			if($basic) $users[$i]->buildBasic($keys[$i]);
			else $users[$i]->build($keys[$i]);
		}
		
		return (!empty($users)) ? $users : NULL;
	}
	
	//TODO: add management methods for userTypes (cut from admin), and user_map table mangagement

}
