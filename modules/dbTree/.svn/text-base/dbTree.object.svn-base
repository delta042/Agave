<?php

class dbTree extends dbObject {
	private $tree;
	
	function __construct() {		
		//constructor sets global DB definition passed by user
		
	}
	
	function build($tree=null, $debug=null) {
	$this->tree = $tree;
	// tree that reflects bottom-up structure extracted from innodb constraints 
	$bottomUpTree=array(); // temp
	// top-down tree to be used in all code
	$topDownTree=array();
	$queryStatement_1 = "SHOW TABLES";
	$tables = $this->doSQLQuery($queryStatement_1,1);
		for ($i=0;$i<count($tables);$i++) {
		$bottomUpTree[$i] = array('table'=>$tables[$i],'parents'=>array());
		$topDownTree[$i] = array('table'=>$tables[$i],'children'=>array());
		$queryStatement_2 = "SHOW CREATE TABLE `".$tables[$i]."`";
		$createTables = $this->doSQLQuery($queryStatement_2,2);	
		$constraintArr = preg_split('/CONSTRAINT/', $createTables['Create Table']);
			foreach($constraintArr as $constraint) {
			$foundContentTable = false;
			   //Only work on InnoDB foreign key info.
			   if(preg_match('/FOREIGN KEY \(`(.*)`\) REFERENCES `(.*)` \(`(.*)`\)/',$constraint,$matchArr_fk)) {
		   	   $foreignKey = $matchArr_fk[1];
		   	   $childTable = $matchArr_fk[2];
		   	   $childKey = $matchArr_fk[3];
		   	   		// LINK MAP TO CONTENT TABLE 
			   		if (preg_match('/^(\w+)\_map$/',$tables[$i],$matchArr_map)) {
				    $tableStem = $matchArr_map[1];
			   		if ($debug == 1) echo ("FOUND A MAP TABLE: " . $tables[$i] . " --> ".$tableStem."<BR>");
			   			// if map table stem matches name of content table, define descendant relationship
			   			if ($tableStem == $childTable) {
						array_push ( $topDownTree[$i]['children'], $childTable);
						if ($debug == 1) echo ("MATCHED TO CONTENT TABLE: " . $childTable. "<BR>");
						$foundContentTable = true;
				   			if ($topDownTree[$i]['matchKey']=='') { 
							$topDownTree[$i]['matchKey'] = $childKey;
							}
			   			}
			   		} //end if (preg_match)
			   		// LINK MATCHED FOREIGN TABLES
			   		if(!$foundContentTable){
			   			if ($childTable == 'exams_map') $childKey = 'examMapKey';  // HACK!
			   		if ($debug == 1) echo ("MATCHED FOREIGN TABLE (`$childTable`)  TO (`" . $tables[$i] . "`) ON KEY ->  (`$childKey`)<BR>");
			   		array_push ( $bottomUpTree[$i]['parents'], array('table' => $childTable, 'key'=>$childKey ) );
			   		} 
			   } //end if (preg_match)
			} // end foreach
		} // end for $i
	$this->disconnect();
	if ($debug == 1) echo ("************ Successfully completed first pass (raw build) ***********<BR>");
	$this->invertTree($topDownTree,$bottomUpTree);
	if ($debug == 1) echo ("************ Successfully completed second pass (invervion) ***********<BR>");
	return $topDownTree; 
	}
	function invertTree(&$topDownTree,&$bottomUpTree) { //bottom-up to top-down
	$debug = 0;
		for ($i=0;$i<count($bottomUpTree);$i++) {
		if ($debug == 1) echo ("Checking... ".$bottomUpTree[$i]['table'] . "<BR>");
		/* HANDLE PARENTS */
			for ($j=0;$j<count($bottomUpTree);$j++) {
				for ($k=0;$k<count($bottomUpTree[$j]['parents']);$k++) {
					if (strtolower($bottomUpTree[$i]['table']) == strtolower($bottomUpTree[$j]['parents'][$k]['table'])) {
						if ($debug == 1)  {
						echo ("Found ".$bottomUpTree[$i]['table'].
						  " as parent of ".$bottomUpTree[$j]['table'].
						  " on key -> ".$bottomUpTree[$j]['parents'][$k]['key']." <BR>" .
						  "ADDING DATA FOR: ".$topDownTree[$i]['table']."<BR>");
						}
						if (!isset($topDownTree[$i]['matchKey']) || $topDownTree[$i]['matchKey']=='') {
						$topDownTree[$i]['matchKey'] = $bottomUpTree[$j]['parents'][$k]['key'];
						//echo ("Add matchKey -> ".$topDownTree[$i]['matchKey']." <BR>");
						}				    
				   	array_push ( $topDownTree[$i]['children'], $bottomUpTree[$j]['table']);
					if ($debug == 1) echo ("Add child -> ".$bottomUpTree[$j]['table']." <BR>");
					}	// end if (table string match)			   
				} // end for $k
			} // end for $j
		} // end for $i
		//return $topDownTree;
	} // end function	
	function displayTree($tree) {
	$styles = " <style type='text/css'> 
				DIV.debugBox {
				background:#EEEEEE;
				border: solid #000000 2px;
				margin:10px;
				width:400px;
				}
				DIV.debugHeader {
				background:#CCCCCC;
				border-bottom: solid #000000 2px;
				padding:10px;
				margin-bottom:10px;
				width:auto;
				}
				DIV.debugContent {
				background:#EEEEEE;
				padding:10px;
				margin-bottom:10px;
				width:auto;
				}
				P.dls_border {
				border:solid 1px #000000;
				background-color: #EEEEEE;
				margin-top:0px;
				margin-bottom:0px;
				padding-top:2px;
				padding-bottom:2px;
				padding-left:5px;
				font-weight:bold;
				}
				</style>";
		if ($tree) {
		$dbTree = " $styles
						<DIV CLASS=debugBox>
							<DIV CLASS=debugHeader>
							<B> Table Tree </B>
							</DIV>
							<DIV CLASS=debugContent>
						";
			for ($i=0;$i<count($tree);$i++) {
			$dbTree .= "<P STYLE='padding:0px 0px 0px 0px'>[ $i ]  TABLE: <B>" . $tree[$i]['table'] ."</B></P>";
				if (count($tree[$i]['children']) > 0) {
				$dbTree .= "<DIV STYLE='margin:auto;width:50%;padding:10px;border:solid 1px #000000;'>CHILDREN:  (" . $tree[$i]['matchKey'] .")<BR>";
					for ($j=0;$j<count($tree[$i]['children']);$j++) {
					$dbTree .= "<P STYLE='padding:0px 0px 0px 30px'>" . $tree[$i]['children'][$j] ."</P>";
					}
				$dbTree .= "</DIV>\n";
				}
			}
		$dbTree .= "</DIV>\n</DIV>\n";
		}
		else {
		$dbTree = "NO TREE!!!";	
		}
	return $dbTree;
	}
}	
?>
